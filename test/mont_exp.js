const path = require("path");

const bigInt = require("big-integer");
const Scalar = require("ffjavascript").Scalar;
const tester = require("circom").tester;

const { splitToArray } = require("./util.js");


describe("montgomery exponent 64bits/4words", function () {
    this.timeout(100000);

    let circuit;
    before(async () => {
        circuit = await tester(path.join(__dirname, "circuits", "mont_exp.circom"));
    });

    it("64bits/4words. and mod = 52435875175126190479447740508185965837690552500527637822603658699938581184513", async () => {

        const modulus = bigInt("24226501697440012621102249466312043787685293040734225606346036389705515508545746221669035424138747582133889500686654172873671086178893587422987328751464627501601101326475761646014534358699943642495332701081302954020983110372109611581202820849485662540890985814355975252780310958088652613376767040069489530039075302709233494829280591680666351811024913107949144932224439129715181798714328219977771472462901856297952813239115577652450722815852332547886777292613005505949100406231716599634852632308325816916535875123863510650526931916871614411907700873376659841257216885666098127478325534982891697988739616416855214839339");

        const m0inv = "4736324870124914557";

        const sign = bigInt("27166015521685750287064830171899789431519297967327068200526003963687696216659347317736779094212876326032375924944649760206771585778103092909024744594654706678288864890801000499430246054971129440518072676833029702477408973737931913964693831642228421821166326489172152903376352031367604507095742732994611253344812562891520292463788291973539285729019102238815435155266782647328690908245946607690372534644849495733662205697837732960032720813567898672483741410294744324300408404611458008868294953357660121510817012895745326996024006347446775298357303082471522757091056219893320485806442481065207020262668955919408138704593");

        // p_A = (2 ** (64 * 32)) % modulus
        const p_A = bigInt("8090504373870994679612627222357908172758809628981258425784309037819139630322144671528165987384165881554828460235243846620448472971597333672100823634983655619029776040825234445735663391689708464300724937302764614255809108270510144580635273488990507929690660037680329790107264933452413195230785359054440855482839030680434847591404383105898217683831262927377177125853366529615844393994132094172487120401275260427990790479346279705147628336449313356516920320620281725278025278479103610090304469418605506553142667456793187284519065351481384226307824293012777494286385249767131477166992943622060450204816237194204381391317");

        // p_a = (a * r) % modulus
        const p_a = bigInt("19072154410336807139418696976260212968540675922546765752736826145996869655756622548873347455947248021050921538311171789715523470247724251557601058125103625700941761034646698858071310182565269768981168519584711995302991904285228697391419713388819104994438114806716920075484924844137359380134009667510391269169076279760491579238026910153675786149676670940528964362751766341740256137008228081948558082219709238817789460567174381895573690274674295098414261384354408417638073989695885913898217149419056478104428576834037267113663842145482274989462614945861102288293269483256693676536058880107741774817376564564751474668870");

        var testCases = [{
            description: "calc powerMod",
            input: {
                // 1844674407370955161600
                p_a: splitToArray(p_a, 64, 32),
                p_A: splitToArray(p_A, 64, 32),

                exp: 65537,
                modulus: splitToArray(modulus, 64, 32),
                m0inv: m0inv,
            },
            output: { out: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] },
        }];


        for (var i = 0; i < testCases.length; i++) {
            const witness = await circuit.calculateWitness(testCases[i].input, true);

            await circuit.assertOut(witness, testCases[i].output);
        }
    });
});


